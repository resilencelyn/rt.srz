<?xml version="1.0" encoding="utf-8"?>

<configuration>
  <configSections>
    <section name="StructureMap" type="StructureMap.Configuration.StructureMapConfigurationSection,StructureMap" />
    <section name="hibernate-configuration" type="NHibernate.Cfg.ConfigurationSectionHandler, NHibernate" />
    <section name="nlog" type="NLog.Config.ConfigSectionHandler, NLog" />
    <section name="PoolNhibernateSection" type="rt.core.business.nhibernate.PoolNhibernateSection, rt.core.business" />
    <section name="SpecialCalendarDaysSection" type="rt.srz.model.configSection.productioncalendar.SpecialCalendarDayConfigurationSection, rt.srz.model, Version=1.0.0.0, Culture=neutral" />
  </configSections>

  <connectionStrings>
    <add name="default" connectionString="Data Source=developer-09; Initial Catalog=rt_srz_empty;User ID=pvp;Password=elianora" providerName="" />
    <add name="NHibernateCfgAtl.xml" connectionString="Data Source=developer-09;Initial Catalog=srz_sample;User ID=pvp;Password=elianora" />
  </connectionStrings>

  <hibernate-configuration xmlns="urn:nhibernate-configuration-2.2">
    <session-factory>
      <property name="current_session_context_class">NHibernate.Context.ThreadStaticSessionContext</property>
      <property name="connection.provider">NHibernate.Connection.DriverConnectionProvider</property>
      <property name="dialect">NHibernate.Dialect.MsSql2005Dialect</property>
      <property name="connection.driver_class">NHibernate.Driver.SqlClientDriver</property>
      <property name="connection.connection_string">Data Source=developer-09; Initial Catalog=rt_srz_demo;User ID=pvp;Password=elianora</property>
      <property name="command_timeout">60</property>
      <mapping assembly="rt.srz.business" />
    </session-factory>
  </hibernate-configuration>
  <StructureMap>
    <Registry Type="rt.core.business.registry.CoreRegistry, rt.core.business" />
    <Registry Type="rt.core.business.registry.NHibernateRegistry, rt.core.business" />
    <Registry Type="rt.core.business.security.registry.SecurityRepositoryRegistry, rt.core.business.security" />    
    <Registry Type="rt.srz.business.registry.RepositoryRegistry, rt.srz.business" />
    <Registry Type="rt.srz.services.registry.SecurityServiceRegistry, rt.srz.services" />
    
    <Registry Type="rt.srz.services.registry.ServicesRegistry, rt.srz.services" />
    <Registry Type="rt.srz.services.registry.StatementServiceRegistry, rt.srz.services" />
  
    <!--<Registry Type="rt.core.service.security.registry.AuthServiceRegistry, 'rt.core.service.security" />-->  
  </StructureMap>
  <nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <targets>
      <target name="asyncConsole" xsi:type="AutoFlushWrapper">
        <target xsi:type="ColoredConsole" name="console" layout="${logger}: ${message}${exception:format=ToString,StackTrace}">
        </target>
      </target>
      <target name="asyncFile" xsi:type="AutoFlushWrapper">
        <target name="file" xsi:type="File" fileName="log/console.${level}.log" layout="${longdate}: ${logger}: ${message}${exception:format=ToString,StackTrace}" archiveFileName="${basedir}/log/archives/${shortdate}.console.{#####}.${level}.log" archiveAboveSize="2097152" archiveNumbering="Sequence" maxArchiveFiles="10000000" concurrentWrites="true" keepFileOpen="false" />
      </target>
    </targets>
    <rules>
      <logger name="*" minlevel="Warn" writeTo="asyncConsole" />
      <logger name="*" minlevel="Info" writeTo="asyncFile" />
    </rules>
  </nlog>
  <PoolNhibernateSection>
    <FileNameConfigaration>
      <add Name="NHibernateCfgAtl.xml" />
    </FileNameConfigaration>
  </PoolNhibernateSection>
  
  
  <system.serviceModel>
    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" />
    <bindings>
      <wsHttpBinding>
        <binding name="wsHttpEndpointName" maxReceivedMessageSize="2147483647" sendTimeout="00:05:00" receiveTimeout="00:05:00" />
      </wsHttpBinding>
      <netTcpBinding>
        <binding name="longMessageBindings" closeTimeout="01:00:00" openTimeout="01:00:00" receiveTimeout="01:00:00" sendTimeout="01:00:00" maxReceivedMessageSize="1073741824" transferMode="StreamedResponse">
          <readerQuotas maxArrayLength="1073741824" />
          <reliableSession inactivityTimeout="01:00:00" />
          <security mode="None">
            <transport clientCredentialType="None" protectionLevel="None" />
          </security>
        </binding>
      </netTcpBinding>
    </bindings>
    <services>
      <service name="rt.srz.services.Statement.StatementGate" behaviorConfiguration="GateBehavior">
        <endpoint address="net.tcp://localhost:9001" behaviorConfiguration="protoEndpointBehavior" binding="netTcpBinding" bindingConfiguration="longMessageBindings" contract="rt.srz.model.interfaces.service.IStatementService" />
      </service>
      <service name="rt.srz.services.Security.SecurityGate" behaviorConfiguration="GateBehavior">
        <endpoint address="net.tcp://localhost:9003" behaviorConfiguration="protoEndpointBehavior" binding="netTcpBinding" bindingConfiguration="longMessageBindings" contract="rt.srz.model.interfaces.service.ISecurityService" />
      </service>
      <!--<service name="rt.core.service.security.AuthGate" behaviorConfiguration="GeteBehavior2">
        <endpoint address="http://localhost:9007" binding="wsHttpBinding" bindingConfiguration="wsHttpEndpointName" contract="rt.core.model.security.IAuthService" />
      </service>-->
    </services>
    <client>
      <endpoint address="http://localhost:8001/PseudonymizationService/" binding="wsHttpBinding" bindingConfiguration="wsHttpEndpointName" contract="rt.srz.model.interfaces.client.IPseudonymizationService" name="wsHttpEndpointName" />
    </client>
    <behaviors>
      <endpointBehaviors>
        <behavior name="clientdebug">
          <callbackDebug includeExceptionDetailInFaults="true" />
          <MyMessageInspector />
        </behavior>
        <behavior name="protoEndpointBehavior">
          <protobuf />
          <dataContractSerializer maxItemsInObjectGraph="2147483647" />
        </behavior>
      </endpointBehaviors>
      <serviceBehaviors>
        <behavior name="debug">
          <serviceDebug includeExceptionDetailInFaults="true" />
        </behavior>
        <behavior name="GeteBehavior2">
          <serviceDebug includeExceptionDetailInFaults="true" />
        </behavior>
        <behavior name="GateBehavior">
          <serviceAuthenticationManager serviceAuthenticationManagerType="rt.core.services.challenge.TokenAuthenticationManager, rt.core.services" />
          <serviceAuthorization principalPermissionMode="Custom">
            <authorizationPolicies>
              <add policyType="rt.core.services.challenge.ChallengeAuthorizationPolicy, rt.core.services" />
            </authorizationPolicies>
          </serviceAuthorization>
          <serviceDebug includeExceptionDetailInFaults="true" />
          <dataContractSerializer maxItemsInObjectGraph="2147483647" />
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <extensions>
      <behaviorExtensions>
        <add name="MyMessageInspector" type="rt.core.services.wcf.MessageFaultInspector, rt.core.services, Version=1.0.0.0, Culture=neutral" />
        <add name="protobuf" type="ProtoBuf.ServiceModel.ProtoBehaviorExtension, protobuf-net, Version=2.0.0.668, Culture=neutral, PublicKeyToken=257b51d87d2e4d67" />
        <add name="ChallengeClientMessageInspector" type="rt.core.service.client.TokenMessageInspector, rt.core.service.dto, Version=1.0.0.0, Culture=neutral" />
      </behaviorExtensions>
    </extensions>
  </system.serviceModel>
    
    
  <SpecialCalendarDaysSection>
    <!--Секция для указания трудового календаря-->
    <specialCalendarDays>
      <add Date="2013-01-01T00:00:00" Type="FreeWorkingDay" />
      <add Date="2013-01-02T00:00:00" Type="FreeWorkingDay" />
      <add Date="2013-01-03T00:00:00" Type="FreeWorkingDay" />
      <add Date="2013-01-04T00:00:00" Type="FreeWorkingDay" />
      <add Date="2013-01-07T00:00:00" Type="FreeWorkingDay" />
      <add Date="2013-01-08T00:00:00" Type="FreeWorkingDay" />
      <add Date="2013-03-08T00:00:00" Type="FreeWorkingDay" />
      <add Date="2013-05-01T00:00:00" Type="FreeWorkingDay" />
      <add Date="2013-05-02T00:00:00" Type="FreeWorkingDay" />
      <add Date="2013-05-03T00:00:00" Type="FreeWorkingDay" />
      <add Date="2013-05-09T00:00:00" Type="FreeWorkingDay" />
      <add Date="2013-05-10T00:00:00" Type="FreeWorkingDay" />
      <add Date="2013-06-12T00:00:00" Type="FreeWorkingDay" />
      <add Date="2013-11-04T00:00:00" Type="FreeWorkingDay" />
    </specialCalendarDays>
  </SpecialCalendarDaysSection>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0,Profile=Mono" />
  </startup>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="NLog" publicKeyToken="5120e14c03d0593c" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.1.0.0" newVersion="2.1.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Common.Logging" publicKeyToken="af08829b84f0328e" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.2.0.0" newVersion="2.2.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>