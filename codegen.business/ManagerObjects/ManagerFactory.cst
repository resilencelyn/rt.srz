<%-- 
Name: ManagerFactory.cst
Author: Tom DuPont
Description: Generates a Manager Factory class for NHibernate.
--%>
<%@ CodeTemplate Language="C#" Inherits="NHibernateHelper" TargetLanguage="C#" Debug="False" Description="Generates a Manager Factory class for NHibernate." %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="False" Category="1a. Source Database" Description="The source database to generate from." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." %>
<%@ Property Name="ManagerNamespace" Type="System.String" Default="NHibernate.Generated.ManagerObjects" Optional="False" Category="2. Namespaces" Description="The desired Namespace for the Manager Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="2. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="NHibernateHelper" Path="..\..\ThirdParty" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="NHibernateHelper" %>
//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;

using rt.core.business.nhibernate;
using StructureMap;

namespace <%= ManagerNamespace %>
{
    public partial interface IManagerFactory
    {
		// Get Methods
        <% foreach(TableSchema table in SourceDatabase.Tables) { %>
		<% if(!ExcludedTables.Contains(table) && !IsManyToMany(table)) { %>
		I<%= GetClassName(table) %>Manager Get<%= GetClassName(table) %>Manager();
		<% } %>
		<% } %>
    }

    public partial class ManagerFactory : IManagerFactory
    {
        public ManagerFactory()
        {
        }

      	<% foreach(TableSchema table in SourceDatabase.Tables) { %>
		<% if(!ExcludedTables.Contains(table) && !IsManyToMany(table)) { %>
		public I<%= GetClassName(table) %>Manager Get<%= GetClassName(table) %>Manager()
        {
            return ObjectFactory.GetInstance<I<%= GetClassName(table) %>Manager>();
        }
		<% } %>
		<% } %>
    }
}
