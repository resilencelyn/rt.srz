<%-- 
Name: BusinessObject.cst
Author: Tom DuPont
Description: Generates a Business Object for NHibernate.
--%>
<%@ CodeTemplate Language="C#" Inherits="CsNHibernateHelper" Src="../Helpers/CsNHibernateHelper.cs" TargetLanguage="C#" Debug="False" Description="Generates a Business Object for NHibernate." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1a. Source Table" Description="The source table to generate from." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." %>
<%@ Property Name="VsVersion" Type="VisualStudioVersion" Default="VS_2008" Optional="False" Category="2. Versions" Description="The version of Visual Studio to generate for." %>
<%@ Property Name="BusinessNamespace" Type="System.String" Default="NHibernate.Generated.BusinessObjects" Optional="False" Category="2. Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="2. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="NHibernateHelper" Path="..\..\ThirdParty" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="NHibernateHelper" %>
<%@ Map Name="SystemCSharp" Src="System-CSharpAlias" %>
<% EntityManager entityManager = new EntityManager(SourceTable, ExcludedTables); %>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using rt.core.model;

namespace <%= BusinessNamespace %>
{
   [DataContract] 
	 [Serializable]
   public partial class <%= GetClassName(SourceTable) %> : BusinessBase<<%= SystemCSharp[GetBusinessBaseIdType(SourceTable).ToString()] %>>
   {
      public <%= GetClassName(SourceTable) %>() { }

	  [XmlElement(Order = 1)]
      [DataMember(Order = 1)]
      public override <%= SystemCSharp[GetBusinessBaseIdType(SourceTable).ToString()] %> Id
      {
        get
        {
          return base.Id;
        }
        set
        {
          base.Id = value;
        }
      } 

       <%--  public override int GetHashCode()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            
            sb.Append(this.GetType().FullName);
            <% foreach(EntityMember em in entityManager.Members) { %>
			sb.Append(<%= em.PropertyName %>);
			<% } %>

            return sb.ToString().GetHashCode();
        } --%>

		<% // Primary Keys %>
		<% if(entityManager.PrimaryKey.IsCompositeKey) { %>
	public override string Id
		{
			get
			{
				System.Text.StringBuilder uniqueId = new System.Text.StringBuilder();
				<% bool isFirst = true; %>
				<% foreach(EntityMember em in entityManager.PrimaryKey.KeyColumns) { %>
				<% if(isFirst) { %>
				<% isFirst = false; %>
				<% } else { %>
				uniqueId.Append("^");
				<% } %>
				uniqueId.Append(<%= em.PrivateVariableName %>.ToString());
				<% } %>
				return uniqueId.ToString();
			}
		}
		
		<% } %>
		<% // Primitives %>
        <% int order = 2; %>
		<% foreach(EntityMember em in entityManager.Members) { %>
        [XmlElement(Order =  <%= order.ToString() %>)]
        [DataMember(Order =  <%= order.ToString() %>)]
        public virtual <%= em.SystemType %> <%= em.PropertyName %> { get; set;}
        
		<% order++; %>
		<% } %>
		<% // Many-To-One %>
		<% foreach(EntityAssociation association in entityManager.ManyToOne) { %>
        <%--  [XmlElement]
		public virtual int rf<%= association.ColumnName %> { get; set;} --%>
        
				[XmlElement(Order =  <%= order.ToString() %>)]
        [DataMember(Order =  <%= order.ToString() %>)]
		public virtual <%= association.ClassName %> <%= association.ColumnName.Replace("ID", "").Replace("Id", "").Replace("_", "") %> { get; set;}
			
        <% order++; %>    
		<% } %>
		<% // One-To-Many & Many-To-Many %>
		<% foreach(EntityAssociation association in entityManager.ToManyUnion) { %>
        [XmlIgnore] 
        public virtual IList<<%= association.ClassName %>> <%= association.PropertyName %> { get; set;}
		
		<% } %>
       }
}
