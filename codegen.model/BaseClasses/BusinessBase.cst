<%-- 
Name: BusinessBase.cst
Author: Tom DuPont
Description: Generates the Business base class for NHibernate.
--%>
<%@ CodeTemplate Language="C#" Inherits="NHibernateHelper" TargetLanguage="C#" Debug="False" Description="Generates the Business base class for NHibernate." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="2. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="NHibernateHelper" Path="..\..\ThirdParty" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="NHibernateHelper" %>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using System.Xml.Serialization;

namespace <%= BaseNamespace %>
{
    interface IBusinessBase<T>
    {
        // Methods
        int GetHashCode();
        bool Equals(object obj);

        // Properties
        T Id { get; }
    }

    /// <summary>
    /// Base for all business objects.
    /// 
    /// For an explanation of why Equals and GetHashCode are overriden, read the following...
    /// http://devlicio.us/blogs/billy_mccafferty/archive/2007/04/25/using-equals-gethashcode-effectively.aspx
    /// </summary>
    /// <typeparam name="T">DataType of the primary key.</typeparam>
    [Serializable] 
    public abstract class BusinessBase<T> : IBusinessBase<T>
    {
        #region Declarations

        private T _id = default(T);

        #endregion

        [XmlElement]
        public virtual T Id
        {
            get { return _id; }
            set { _id = value; }
        }

        #region Methods

        public override bool Equals(object obj)
        {
            BusinessBase<T> compareTo = obj as BusinessBase<T>;

            return compareTo != null
                && HasSameNonDefaultIdAs(compareTo)
                && HasSameBusinessSignatureAs(compareTo);
        }

        /// <summary>  
        /// Transient objects are not associated with an   
        /// item already in storage.  For instance, a   
        /// Customer is transient if its ID is 0.  
        /// </summary>  
        public virtual bool IsTransient()
        {
            return Id == null || Id.Equals(default(T));
        }

        /// <summary>  
        /// Must be implemented to compare two objects  
        /// </summary>  
        public abstract override int GetHashCode();

        private bool HasSameBusinessSignatureAs(BusinessBase<T> compareTo)
        {
            return GetHashCode().Equals(compareTo.GetHashCode());
        }

        /// <summary>  
        /// Returns true if self and the provided domain   
        /// object have the same ID values and the IDs   
        /// are not of the default ID value  
        /// </summary>  
        private bool HasSameNonDefaultIdAs(BusinessBase<T> compareTo)
        {
            return IsTransient() || compareTo.IsTransient() || Id.Equals(compareTo.Id);
        }  
  
        #endregion
    }
}
