//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate;
using rt.core.business.nhibernate;
using rt.srz.model.srz;

namespace rt.srz.business.manager
{
    public partial interface ISearchKeyManager : IManagerBase<rt.srz.model.srz.SearchKey, System.Guid>
    {
		// Get Methods
		IList<SearchKey> GetByDocumentUdlTypeId(System.Int32 concept);
		IList<SearchKey> GetByInsuredPersonId(System.Guid insuredPerson);
		IList<SearchKey> GetByQueryResponseId(System.Guid queryResponse);
		IList<SearchKey> GetByKeyTypeId(System.Guid searchKeyType);
		IList<SearchKey> GetByStatementId(System.Guid statement);
		IList<SearchKey> GetByKeyValue(System.Byte[] keyValue);
    
    }

    partial class SearchKeyManager : ManagerBase<rt.srz.model.srz.SearchKey, System.Guid>, ISearchKeyManager
    {
        #region Get Methods

		
		public IList<SearchKey> GetByDocumentUdlTypeId(System.Int32 concept)
        {
            ICriteria criteria = Session.GetISession().CreateCriteria(typeof(SearchKey));
			
			
			ICriteria conceptCriteria = criteria.CreateCriteria("Concept");
            conceptCriteria.Add(NHibernate.Criterion.Expression.Eq("Id", concept));
			
			return criteria.List<SearchKey>();
        }
		
		public IList<SearchKey> GetByInsuredPersonId(System.Guid insuredPerson)
        {
            ICriteria criteria = Session.GetISession().CreateCriteria(typeof(SearchKey));
			
			
			ICriteria insuredPersonCriteria = criteria.CreateCriteria("InsuredPerson");
            insuredPersonCriteria.Add(NHibernate.Criterion.Expression.Eq("Id", insuredPerson));
			
			return criteria.List<SearchKey>();
        }
		
		public IList<SearchKey> GetByQueryResponseId(System.Guid queryResponse)
        {
            ICriteria criteria = Session.GetISession().CreateCriteria(typeof(SearchKey));
			
			
			ICriteria queryResponseCriteria = criteria.CreateCriteria("QueryResponse");
            queryResponseCriteria.Add(NHibernate.Criterion.Expression.Eq("Id", queryResponse));
			
			return criteria.List<SearchKey>();
        }
		
		public IList<SearchKey> GetByKeyTypeId(System.Guid searchKeyType)
        {
            ICriteria criteria = Session.GetISession().CreateCriteria(typeof(SearchKey));
			
			
			ICriteria searchKeyTypeCriteria = criteria.CreateCriteria("SearchKeyType");
            searchKeyTypeCriteria.Add(NHibernate.Criterion.Expression.Eq("Id", searchKeyType));
			
			return criteria.List<SearchKey>();
        }
		
		public IList<SearchKey> GetByStatementId(System.Guid statement)
        {
            ICriteria criteria = Session.GetISession().CreateCriteria(typeof(SearchKey));
			
			
			ICriteria statementCriteria = criteria.CreateCriteria("Statement");
            statementCriteria.Add(NHibernate.Criterion.Expression.Eq("Id", statement));
			
			return criteria.List<SearchKey>();
        }
		
		public IList<SearchKey> GetByKeyValue(System.Byte[] keyValue)
        {
            ICriteria criteria = Session.GetISession().CreateCriteria(typeof(SearchKey));
			
			
			criteria.Add(NHibernate.Criterion.Expression.Eq("KeyValue", keyValue));
			
			return criteria.List<SearchKey>();
        }
		
		#endregion
    }
}