<%-- 
Name: UnitTests.cst
Author: Tom DuPont
Description: Generates Unit Tests for NHibernate.
--%>
<%@ CodeTemplate Language="C#" Inherits="NHibernateHelper" TargetLanguage="C#" Debug="False" Description="Generates Unit Tests for NHibernate." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1a. Source Table" Description="The source table to generate from." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." %>
<%@ Property Name="NHibVersion" Type="NHibernateVersion" Default="v1_2" Optional="False" Category="2. NHibernate" Description="The version of NHibernate to generate for." %>
<%@ Property Name="ManagerNamespace" Type="System.String" Default="NHibernate.Generated.ManagerObjects" Optional="False" Category="3. Namespaces" Description="The desired Namespace for the Manager Objects." %>
<%@ Property Name="BusinessNamespace" Type="System.String" Default="NHibernate.Generated.BusinessObjects" Optional="False" Category="3. Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="3. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Property Name="UnitTestNamespace" Type="System.String" Default="NHibernate.Generated.UnitTests" Optional="False" Category="3. Namespaces" Description="The desired Namespace for the UnitTests." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="NHibernateHelper" Path="..\..\..\ThirdParty" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="NHibernateHelper" %>
<%@ Map Name="SystemCSharp" Src="System-CSharpAlias" %>
<% EntityManager entityManager = new EntityManager(SourceTable, ExcludedTables); %>
//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate;
using NHibernate.Context;
using NUnit.Framework;
using StructureMap;
using rt.core.business.nhibernate;
using rt.core.business.registry;
using rt.core.model;
using <%= ManagerNamespace %>;
using <%= BusinessNamespace %>;

namespace <%= UnitTestNamespace %>
{
	[TestFixture]
    public partial class <%= GetClassName(SourceTable) %>Tests : UnitTestbase
    {
        [SetUp]
        public void SetUp()
        {
            Bootstrapper.Bootstrap();
            session = ObjectFactory.GetInstance<ISessionFactory>().OpenSession();
            CurrentSessionContext.Bind(session);
            manager = ObjectFactory.GetInstance<I<%= GetClassName(SourceTable) %>Manager>();
            manager.Session.BeginTransaction();
        }

        [TearDown]
        public void TearDown()
        {
            manager.Session.RollbackTransaction();
        }
        
        protected <%= ManagerNamespace %>.I<%= GetClassName(SourceTable) %>Manager manager;
        
        protected ISession session { get; set; }
		
		public static <%= GetClassName(SourceTable) %> CreateNew (int depth = 0)
		{
			<%= BusinessNamespace %>.<%= GetClassName(SourceTable) %> entity = new <%= BusinessNamespace %>.<%= GetClassName(SourceTable) %>();
			
			<% if(!entityManager.PrimaryKey.IsCompositeKey && !entityManager.PrimaryKey.IsIdentity) { %>
			// You may need to maually enter this key if there is a constraint violation.
			entity.Id = <%= GetUnitTestInitialization(entityManager.PrimaryKey.KeyColumn.Column) %>;
			<% } %>
			
			<% // Primitives %>
			<% foreach(EntityMember em in entityManager.Members) { if (em.SetNull) {%>
      <% if (em.PropertyName != "UserId") {%>
			entity.<%= em.PropertyName %> = null;
      <% } else {%>
      entity.<%= em.PropertyName %> = new Guid("01000000-0000-0000-0000-000000000000");
      <% } } else {%>
      entity.<%= em.PropertyName %> = <%= GetUnitTestInitialization(em.Column) %>;
      <% } } %>
			<% // Many-To-One %>
			<% foreach(EntityAssociation association in entityManager.ManyToOne) { %>
			
			using(<%= ManagerNamespace %>.I<%= association.ClassName %>Manager <%= association.VariableName %>Manager = ObjectFactory.GetInstance<I<%= association.ClassName %>Manager>())
				{
           <% if (!association.Column.AllowDBNull) { %> 
				    var all = <%= association.VariableName %>Manager.GetAll(1);
            <%= association.ClassName %> entityRef = null;
					  if (all.Count > 0)
					  {
              entityRef = all[0];
					  }
          
					 if (entityRef == null && depth < 3)
           {
             depth++;
             entityRef = <%= association.ClassName %>Tests.CreateNew(depth);
             ObjectFactory.GetInstance<ISessionFactory>().GetCurrentSession().Save(entityRef);
           }
           
					 entity.<%= association.ColumnName.Replace("ID", "").Replace("Id", "").Replace("_", "") %> = entityRef ;
           <% } else { %>
           entity.<%= association.ColumnName.Replace("ID", "").Replace("Id", "").Replace("_", "") %> = null;
           <% } %>
				}	
			<% } %>
			
			return entity;
		}
		protected <%= BusinessNamespace %>.<%= GetClassName(SourceTable) %> GetFirst<%= GetClassName(SourceTable) %>()
        {
            IList<<%= BusinessNamespace %>.<%= GetClassName(SourceTable) %>> entityList = manager.GetAll(1);
            if (entityList.Count == 0)
                Assert.Fail("All tables must have at least one row for unit tests to succeed.");
            return entityList[0];
        }
		
		[Test]
        public void Create()
        {
            try
            {
				<%= BusinessNamespace %>.<%= GetClassName(SourceTable) %> entity = CreateNew();
				
                object result = manager.Save(entity);

                Assert.IsNotNull(result);
            }
            catch(Exception ex)
            {
                Assert.Fail(ex.ToString());
            }
        }
        [Test]
        public void Read()
        {
            try
            {
                <%= BusinessNamespace %>.<%= GetClassName(SourceTable) %> entityA = CreateNew();
				manager.Save(entityA);

                <%= BusinessNamespace %>.<%= GetClassName(SourceTable) %> entityB = manager.GetById(entityA.Id);

                Assert.AreEqual(entityA, entityB);
            }
            catch (Exception ex)
            {
                Assert.Fail(ex.ToString());
            }
        }
		<% if(entityManager.Members.Count > 0) { %>
		[Test]
		public void Update()
        {
            try
            {
				<%= BusinessNamespace %>.<%= GetClassName(SourceTable) %> entityC = CreateNew();
				manager.Save(entityC);
				manager.Session.GetISession().Flush();
				manager.Session.GetISession().Clear();
			
                <%= BusinessNamespace %>.<%= GetClassName(SourceTable) %> entityA = GetFirst<%= GetClassName(SourceTable) %>();
				
				<% if(entityManager.MembersNoKeyNoVersion.Count > 0) { %>
				entityA.<%= entityManager.MembersNoKeyNoVersion[0].PropertyName %> = <%= GetUnitTestInitialization(entityManager.MembersNoKeyNoVersion[0].Column) %>;
				<% } %>
				
				manager.Update(entityA);

                <%= BusinessNamespace %>.<%= GetClassName(SourceTable) %> entityB = manager.GetById(entityA.Id);

                Assert.AreEqual(entityA.<%= entityManager.Members[0].PropertyName %>, entityB.<%= entityManager.Members[0].PropertyName %>);
            }
            catch (Exception ex)
            {
                Assert.Fail(ex.ToString());
            }
        }
		<% } %>
        [Test]
        public void Delete()
        {
            try
            {
			    <%= BusinessNamespace %>.<%= GetClassName(SourceTable) %> entityC = CreateNew();
				manager.Save(entityC);
				manager.Session.GetISession().Flush();
				manager.Session.GetISession().Clear();
			
                <%= BusinessNamespace %>.<%= GetClassName(SourceTable) %> entity = GetFirst<%= GetClassName(SourceTable) %>();
				
                manager.Delete(entity);

				<% if(NHibVersion.Equals(NHibernateVersion.v1_2)) { %>
                try
                {
                    entity = manager.GetById(entity.Id);
                    Assert.Fail("Object should have been deleted!");
                }
                catch(Exception ex)
                {
                    Assert.IsInstanceOfType(typeof(NHibernate.ObjectDeletedException), ex);
                }
				<% } else { %>
                entity = manager.GetById(entity.Id);
                Assert.IsNull(entity);
				<% } %>
            }
            catch (Exception ex)
            {
                Assert.Fail(ex.ToString());
            }
        }
	}
}

<script runat="template">
private static Random random = new Random();
public static string GetUnitTestInitialization(ColumnSchema column)
{
    string result;

    if (column.SystemType.Equals(typeof(String)))
    {   
        if (column.Name.ToLower() != "code")
        {
          StringBuilder sb = new StringBuilder();

          int size = (column.Size > 0 && column.Size < 100) ? random.Next(1, column.Size) : 10;

          sb.Append("\"");
          for (int x = 0; x < size; x++)
          {
            switch (x % 5)
            {
                case 0:
                    sb.Append("T");
                    break;
                case 1:
                    sb.Append("e");
                    break;
                case 2:
                    sb.Append("s");
                    break;
                case 3:
                    sb.Append("t");
                    break;
                case 4:
                    sb.Append(" ");
                    break;
            }
          }
          sb.Append("\"");

          result = sb.ToString();
        }
        else
           result = "\"123\"";
    }
    else if (column.SystemType.Equals(typeof(DateTime)))
        result = "System.DateTime.Now";
    else if (column.SystemType.Equals(typeof(Decimal)))
        result = Convert.ToDecimal(random.Next(1, 100)).ToString();
    else if (column.SystemType.Equals(typeof(Int32)))
        result = random.Next(1, 100).ToString();
    else if (column.SystemType.Equals(typeof(Boolean)))
        result = (random.Next(1, 2).Equals(1)).ToString().ToLower();
    else if (column.SystemType.Equals(typeof(Guid)))
        result = "System.Guid.NewGuid()";
    else if (column.SystemType.Equals(typeof(Byte[])))
        result = "new System.Byte[]{}";
    else if (column.SystemType.IsPrimitive)
        result = String.Format("default({0})", column.SystemType.Name.ToString());
    else
        result = "null";

    return result;
}
</script>