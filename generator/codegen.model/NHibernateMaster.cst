<%-- 
Name: NHibernateMaster.cst
Author: Tom DuPont
Description: Generates a complete set of Maps, Business Objects, Manager Objects, and a ManagerFactory for NHibernate, the adds them to the specified .csproj file.
--%>
<%@ CodeTemplate Language="C#" Src="Helpers\CsNHibernateHelper.cs" Inherits="CsNHibernateHelper" TargetLanguage="C#" OutputType="None" Debug="False" Description="Generates a complete set of Maps, Business Objects, Manager Objects, and a ManagerFactory for NHibernate, the adds them to the specified .csproj file." %>

<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="False" Category="1a. Source Database" Description="The source database to generate from." %>

<%@ Property Name="ExcludedColumns" Type="CodeSmith.CustomProperties.StringCollection" Default="" Optional="True" Category="1b. Database Options" Description="A collection of regular expressions; a match will excluded a column." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." Filter="SourceTable"%>
<%@ Property Name="TablePrefix" Type="System.String" Default="" Optional="True" Category="1b. Database Options" Description="A prefix that will be stripped from table names when class names are generated." %>
<%@ Property Name="VersionColumn" Type="System.String" Default="^((R|r)ow)?(V|v)ersion$" Optional="True" Category="1b. Database Options" Description="A regular expression; a match will mark a column as a version column." %>

<%@ Property Name="NHibernateVersion" Type="NHibernateVersion" Default="v2_0" Optional="False" Category="2. Versions" Description="The version of NHibernate to generate for." %>
<%@ Property Name="VsVersion" Type="VisualStudioVersion" Default="VS_2008" Optional="False" Category="2. Versions" Description="The version of Visual Studio to generate for." %>

<%@ Property Name="AssemblyName" Type="System.String" Default="NHibernate.Generated" Optional="False" Category="3a. Assembly" Description="The name of the Assembly that will contain the business objects." %>

<%@ Property Name="ManagerNamespace" Type="System.String" Default="NHibernate.Generated.ManagerObjects" Optional="False" Category="3b. Namespaces" Description="The desired Namespace for the Manager Objects." %>
<%@ Property Name="BusinessNamespace" Type="System.String" Default="NHibernate.Generated.BusinessObjects" Optional="False" Category="3b. Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="3b. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Property Name="UnitTestNamespace" Type="System.String" Default="NHibernate.Generated.UnitTests" Optional="False" Category="3b. Namespaces" Description="The desired Namespace for the UnitTests." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="Microsoft.Build.Utilities" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="NHibernateHelper" Path="..\..\ThirdParty" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>

<%@ Map Name="SystemCSharp" Src="System-CSharpAlias" %>

<%@ Register Name="BusinessObjectTemplate" Template="BusinessObjects\BusinessObject.cst" %>
<%@ Register Name="EditableBusinessObjectTemplate" Template="BusinessObjects\EditableBusinessObject.cst" %>


<script runat="template">
public override void Render(TextWriter writer)
{
    string[] excludedColumns = (ExcludedColumns != null) ? ExcludedColumns.ToArray() : new string[0]{};
	HelperInit(this.TablePrefix, this.SystemCSharp, this.KeyWords, excludedColumns, this.VersionColumn, this.SourceDatabase.Provider.Name);
	
	if(ExcludedTables == null)
		ExcludedTables = new TableSchemaCollection();
	
    foreach(TableSchema table in SourceDatabase.Tables)
        if(!ExcludedTables.Contains(table) && !table.HasPrimaryKey && !IsManyToMany(table))
        {
            System.Windows.Forms.MessageBox.Show(
                String.Format("The table, \"{0}\", has no PrimaryKey; it has been added to the ExcludedTables list.", table.Name),
                "CodeSmith - NHibernate Template Warning",
                System.Windows.Forms.MessageBoxButtons.OK,
                System.Windows.Forms.MessageBoxIcon.Warning);
            ExcludedTables.Add(table);
        }
    
	foreach(TableSchema table in SourceDatabase.Tables)
		if(!ExcludedTables.Contains(table) && !IsManyToMany(table))
		{
			RenderBusinessObjects(table);
		}
}

private void RenderBusinessObjects(TableSchema table)
{
	string fileName = String.Format("{0}{1}.generated.cs", GetFolder(BusinessNamespace), GetClassName(table));
	string editableFileName = String.Format("{0}{1}.cs", GetFolder(BusinessNamespace), GetClassName(table));
	
	if(!File.Exists(editableFileName))
	{
		EditableBusinessObjectTemplate editableBusinessObject = this.Create<EditableBusinessObjectTemplate>();
		editableBusinessObject.BusinessNamespace = this.BusinessNamespace;
		editableBusinessObject.BaseNamespace = this.BaseNamespace;
		editableBusinessObject.SourceTable = table;
		
		editableBusinessObject.RenderToFile(GetOutputFile(editableFileName, null), true);
	}
	
	BusinessObjectTemplate businessObject = this.Create<BusinessObjectTemplate>();
	businessObject.BusinessNamespace = this.BusinessNamespace;
	businessObject.BaseNamespace = this.BaseNamespace;
	businessObject.VsVersion = this.VsVersion;
	businessObject.SourceTable = table;
	businessObject.ExcludedTables = this.ExcludedTables;

	businessObject.RenderToFile(GetOutputFile(fileName, editableFileName), true);
}

private OutputFile GetOutputFile(string fileName, string dependentUpon, params object[] metaData)
{
	OutputFile outputFile = new OutputFile(fileName);
	
	if(!String.IsNullOrEmpty(dependentUpon))
		outputFile.DependentUpon = Path.GetFullPath(dependentUpon);
	
	if(metaData.Length % 2 != 0)
		throw new Exception("Invalid Metadata: Provide 2 objects per entry, a String (key) followed by an Object.");
	for(int x=0; x<metaData.Length; x+=2)
    	outputFile.Metadata.Add(metaData[x].ToString(), metaData[x+1]);
		
	return outputFile;
}
private string GetFolder(string folder)
{
	if (folder.Contains(".") && !folder.EndsWith("."))
        folder = folder.Substring(folder.LastIndexOf('.')+1);
		
	if(String.IsNullOrEmpty(folder))
		folder = String.Empty;
	else
	{
		if (!Directory.Exists(folder))
            Directory.CreateDirectory(folder);
			
		if (!folder.EndsWith("\\"))
			folder = String.Format("{0}\\", folder);
	}
	return folder;
}
</script>